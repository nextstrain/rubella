rule build:
    input:
        "auspice/rubella_all.json",
        "auspice/rubella_E1.json",
        # "auspice/nipah_human.json",
        # "auspice/nipah_I.json",
        # "auspice/nipah_II.json",


genes = ["NSP", "SP"]


wildcard_constraints:
    build="all|E1",


rule get_metadata:
    input:
        metadata="../ingest/results/metadata.tsv",
    output:
        metadata="data/metadata.tsv",
    shell:
        """
        cp {input} {output}
        """


rule get_sequences:
    input:
        sequences="../ingest/results/sequences.fasta",
    output:
        sequences="data/sequences.fasta",
    shell:
        """
        cp {input} {output}
        """


rule prealign:
    input:
        fasta="data/sequences.fasta",
        reference="config/reference.fasta",
        genemap="config/genemap.gff",
    output:
        alignment="pre-processed/aligned.fasta",
        tsv="pre-processed/nextclade.tsv",
    shell:
        """
        nextclade run \
            --input-ref {input.reference} \
            --input-annotation {input.genemap} \
            --output-tsv pre-processed/nextclade.tsv \
            --output-fasta {output.alignment} \
            -- {input.fasta}
        """


rule bad_strains:
    input:
        tsv="pre-processed/nextclade.tsv",
    output:
        bad="pre-processed/bad.txt",
    shell:
        """
        tsv-filter -H \
            --invert \
            --is-numeric alignmentStart \
            --is-numeric alignmentEnd \
            {input.tsv} > {output.bad}
        tsv-filter -H \
            --is-numeric alignmentStart \
            --gt alignmentStart:8750 \
            {input.tsv} | tail -n +2 >> {output.bad}
        tsv-filter -H \
            --is-numeric alignmentEnd \
            --lt alignmentEnd:9400 \
            {input.tsv} | tail -n +2 >> {output.bad}
        tsv-select -H \
            -f seqName \
            {output.bad} \
        | tail -n +2 \
        | sort \
        | uniq > {output.bad}.tmp
        mv {output.bad}.tmp {output.bad}
        """


rule index:
    input:
        "data/sequences.fasta",
    output:
        "data/sequences.index",
    shell:
        """
        augur index \
            --sequences {input} \
            --output {output}
        """


rule download_lat_longs:
    output:
        "builds/lat_longs.tsv",
    params:
        url="https://raw.githubusercontent.com/nextstrain/ncov/master/defaults/lat_longs.tsv",
    shell:
        """
        curl {params.url} | \
        sed "s/North Rhine Westphalia/North Rhine-Westphalia/g" | \
        sed "s/Baden-Wuerttemberg/Baden-Wurttemberg/g" \
        > {output}
        """


def exclude_where(w):
    d = {}
    return d.get(w["build"], "")


def min_length(w):
    d = {
        "all": 7000,
        "E1": 500,
    }
    return d.get(w["build"], 0)


rule filter:
    input:
        sequences="pre-processed/aligned.fasta",
        metadata="data/metadata.tsv",
        exclude="config/exclude.txt",
        exclude_bad="pre-processed/bad.txt",
        index="data/sequences.index",
        include="config/include.txt",
    output:
        sequences="builds/{build}/sequences.fasta",
        metadata="builds/{build}/metadata.tsv",
    params:
        exclude_where=lambda w: exclude_where(w),
        min_length=lambda w: min_length(w),
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --exclude {input.exclude} {input.exclude_bad} \
            --sequence-index {input.index} \
            --min-length {params.min_length} \
            {params.exclude_where} \
            --output {output.sequences} \
            --metadata-id-columns accession \
            --group-by year country \
            --include {input.include} \
            --subsample-max-sequences 1000 \
            --output-metadata {output.metadata}
        """


rule mask:
    input:
        alignment="builds/{build}/sequences.fasta",
        mask="config/mask_{build}.bed",
    output:
        alignment="builds/{build}/masked.fasta",
    shell:
        """
        augur mask \
            --sequences {input.alignment} \
            --mask {input.mask} \
            --output {output.alignment}
        """


rule align_after_mask:
    input:
        fasta="builds/{build}/masked.fasta",
        reference="config/reference.fasta",
        genemap="config/genemap.gff",
    output:
        alignment="builds/{build}/aligned.fasta",
    params:
        template_string=lambda w: f"builds/{w.build}/translations/gene.{{cds}}.fasta",
        genes=",".join(genes),
    shell:
        """
        nextclade run \
            --input-ref {input.reference} \
            --input-annotation {input.genemap} \
            --cds-selection {params.genes} \
            --output-translations {params.template_string} \
            --output-fasta {output.alignment} \
            -- {input.fasta}
        """


rule tree:
    input:
        alignment="builds/{build}/masked.fasta",
    output:
        tree="builds/{build}/tree_raw.nwk",
    params:
        args="'-ninit 10 -n 4 -czb -T AUTO'",
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --tree-builder-args {params.args} \
            --output {output.tree}
        """


rule refine:
    input:
        tree="builds/{build}/tree_raw.nwk",
        alignment="builds/{build}/masked.fasta",
        metadata="builds/{build}/metadata.tsv",
    output:
        tree="builds/{build}/tree.nwk",
        node_data="builds/{build}/branch_lengths.json",
    params:
        coalescent="opt",
        date_inference="marginal",
        clock_filter_iqd=0,
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --metadata-id-columns accession \
            --output-tree {output.tree} \
            --timetree \
            --precision 3 \
            --keep-polytomies \
            --use-fft \
            --root MH745077.1 DQ388279.1 \
            --output-node-data {output.node_data} \
            --coalescent {params.coalescent} \
            --date-inference {params.date_inference} \
            --date-confidence \
            --clock-filter-iqd {params.clock_filter_iqd}
        """


def relevant_genes(w):
    d = {
        "all": genes,
        "E1": ["SP"],
    }
    return " ".join(d.get(w["build"], []))


rule ancestral:
    input:
        tree="builds/{build}/tree.nwk",
        alignment="builds/{build}/masked.fasta",
        translation_trigger="builds/{build}/aligned.fasta",
        annotation="config/reference.gb",
    output:
        node_data="builds/{build}/muts.json",
    params:
        inference="joint",
        translations="builds/{build}/translations/gene.%GENE.fasta",
        genes=lambda w: relevant_genes(w),
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --inference {params.inference} \
            --genes {params.genes} \
            --annotation {input.annotation} \
            --translations {params.translations} \
            --root-sequence {input.annotation} \
            2>&1 | tee {log}
        """


rule clades:
    input:
        tree="builds/{build}/tree.nwk",
        node_data="builds/{build}/muts.json",
        clades="config/clades.tsv",
    output:
        clades="builds/{build}/clades.json",
    shell:
        """
        augur clades \
            --tree {input.tree} \
            --mutations {input.node_data} \
            --clades {input.clades} \
            --output-node-data {output.clades}
        """


rule export:
    input:
        tree="builds/{build}/tree.nwk",
        node_data="builds/{build}/branch_lengths.json",
        clades="builds/{build}/clades.json",
        ancestral="builds/{build}/muts.json",
        auspice_config="config/auspice_config.json",
        lat_longs=rules.download_lat_longs.output,
        metadata="builds/{build}/metadata.tsv",
    output:
        auspice_json="auspice/rubella_{build}.json",
        root_json="auspice/rubella_{build}_root-sequence.json",
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --node-data {input.node_data} {input.ancestral} {input.clades} \
            --include-root-sequence \
            --auspice-config {input.auspice_config} \
            --lat-longs {input.lat_longs} \
            --output {output.auspice_json} \
            --metadata-id-columns accession \
            --metadata {input.metadata}
        """


rule deploy:
    input:
        "auspice/rubella_all.json",
        "auspice/rubella_all_root-sequence.json",
    shell:
        """
        nextstrain remote upload nextstrain.org/groups/neherlab/staging/rubella {input} 2>&1
        """
